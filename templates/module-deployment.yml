parameters:
- name: environment
  type: string
  values:
  - dev
  - qa
  - uat
  - prd

- name: subscription
  type: string

- name: module
  type: string

stages:
  - stage: ${{ parameters.environment }}
    displayName: Release - ${{ upper(parameters.environment) }}
    jobs:
      - deployment: bicep_push
        displayName: 'Bicep: Module Push - ${{ parameters.module }}'
        variables:
        - group: 'bicep-${{ parameters.environment }}-module-configs'
        ${{ if eq(parameters.environment, 'dev')}}:
          environment: 'Development'
        ${{ if eq(parameters.environment, 'qa')}}:
          environment: 'Quality Assurance'
        ${{ if eq(parameters.environment, 'uat')}}:
          environment: 'User Acceptance Testing'
        ${{ if eq(parameters.environment, 'prd')}}:
          environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
              - checkout: self
                displayName: Checkout
              - task: AzurePowerShell@5
                displayName: "Upcert Bicep Modules"
                # Either deploy when branch: = 'development' and environment: = 'dev' or 
                condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), and(eq('${{ parameters.environment }}', 'dev'), eq(variables['Build.SourceBranch'], 'refs/heads/development'))))
                inputs:
                  azureSubscription: ${{ parameters.subscription }}
                  azurePowerShellVersion: LatestVersion
                  pwsh: true
                  ScriptType: "FilePath"
                  ScriptPath: "bicepscript.ps1"
                  ScriptArguments:
                    -moduleName ${{ parameters.module }}
                    -storageAccountName $(storage-account)
                    -storageAccountContainerName $(storage-account-container)
                    -storageAccountResourceGroup $(storage-account-resource-group)
                    -containerRegistryName $(container-registry)
                    -containerRegistryResourceGroup $(container-registry-resource-group)
                    -skipSchemaUpdate $(skip-schema-update)

